generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id        String  @id
  username  String  @unique
  firstname String
  lastName  String
  email     String? @unique
  phone     String? @unique
  address   String
  img       String
  bloodType String
  sex       UserSex

  attendance Attendance[]
  results    Result[]

  parentId String
  parent   Parent @relation(fields: [parentId], references: [id])
  classId  Int
  class    Class  @relation(fields: [classId], references: [id])
  gradeId  Int
  grade    Grade  @relation(fields: [gradeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id        String    @id
  username  String    @unique
  firstname String
  lastName  String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String
  bloodType String
  sex       UserSex
  classes   Class[]
  subjects  Subject[]
  lessons   Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Parent {
  id        String    @id
  username  String    @unique
  firstname String
  lastName  String
  email     String?   @unique
  phone     String?   @unique
  address   String
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Grade {
  id    Int    @id @default(autoincrement())
  level String @unique

  stundents Student[]
  classes   Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  lessons      Lesson[]
  student      Student[]
  supervisorId String
  supervisor   Teacher   @relation(fields: [supervisorId], references: [id])
  gradeId      Int
  grade        Grade?    @relation(fields: [gradeId], references: [id])

  events       Event[]
  announcement Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId  Int?
  subject    Subject?     @relation(fields: [subjectId], references: [id])
  teacherId  String?
  teacher    Teacher?     @relation(fields: [teacherId], references: [id])
  classId    Int?
  class      Class?       @relation(fields: [classId], references: [id])
  Exam       Exam[]
  Assignment Assignment[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  dueTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int   @id @default(autoincrement())
  score Float

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  Student      Student?    @relation(fields: [studentId], references: [id])
  studentId    String?
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String?
  Student   Student? @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endTime     DateTime

  classId Int?
  Class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  Class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
